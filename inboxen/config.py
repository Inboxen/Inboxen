##
#    Copyright (C) 2015, 2020 Jessica Tallon & Matt Molyneaux
#
#    This file is part of Inboxen.
#
#    Inboxen is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Inboxen is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with Inboxen  If not, see <http://www.gnu.org/licenses/>.
##

import os
import warnings

from django.core import exceptions
from ruamel.yaml import YAML

from inboxen.utils.misc import setdefault_deep

##
# Most configuration can be done via inboxen.config
#
# The file is searched for in the follow way:
# 1. The environment variable "INBOXEN_CONFIG", which contains an absolute path
# 2. ~/.config/inboxen/inboxen.config
# 3. inboxen.config in the current working directory
# 4. inboxen.config in the root of the git repo (i.e. the same directory as "manage.py")
#
##
is_testing = int(os.getenv("INBOXEN_TESTING", "0")) > 0

BASE_DIR = os.path.dirname(os.path.dirname(__file__))

if is_testing:
    CONFIG_PATH = ""
elif os.path.exists(os.getenv("INBOX_CONFIG", "")):
    CONFIG_PATH = os.getenv("INBOX_CONFIG")
elif os.path.exists(os.path.expanduser("~/.config/inboxen/inboxen.config")):
    CONFIG_PATH = os.path.expanduser("~/.config/inboxen/inboxen.config")
elif os.path.exists(os.path.join(os.getcwd(), "inboxen.config")):
    CONFIG_PATH = os.path.join(os.getcwd(), "inboxen.config")
elif os.path.exists(os.path.join(BASE_DIR, "inboxen.config")):
    CONFIG_PATH = os.path.join(BASE_DIR, "inboxen.config")
else:
    raise exceptions.ImproperlyConfigured("You must provide a inboxen.config file")

yaml_parser = YAML(typ="safe")
default_values = yaml_parser.load(open(os.path.join(BASE_DIR, "inboxen", "config_defaults.yaml")))

if CONFIG_PATH:
    config_file = yaml_parser.load(open(CONFIG_PATH))
else:
    config_file = None

config = setdefault_deep(config_file, default_values)

try:
    SECRET_KEY = config["secret_key"]
except KeyError:
    if is_testing:
        warnings.warn("You haven't set 'secret_key' in your inboxen.config", ImportWarning)
    else:
        raise exceptions.ImproperlyConfigured("You must set 'secret_key' in your inboxen.config")

# Admins (and managers)
ADMINS = config["admins"]

# List of hosts allowed
ALLOWED_HOSTS = config["allowed_hosts"]

# Enable debugging - DO NOT USE IN PRODUCTION
DEBUG = config["debug"]

# Allow new users to register
ENABLE_REGISTRATION = config["enable_registration"]

# Language code, e.g. en-gb
LANGUAGE_CODE = config["language_code"]

# Where `manage.py collectstatic` puts static files
STATIC_ROOT = os.path.join(os.getcwd(), config["static_root"])

# Media files get uploaded to this dir
MEDIA_ROOT = os.path.join(os.getcwd(), config["media_root"])

# Email the server uses when sending emails
SERVER_EMAIL = config["server_email"]

# Site name used in page titles
SITE_NAME = config["site_name"]

# Link to source code
SOURCE_LINK = config["source_link"]

# Link to issue tracker
SOURCE_LINK = config["issue_link"]

# Time zone
TIME_ZONE = config["time_zone"]

# Per user email quota
PER_USER_EMAIL_QUOTA = config["per_user_email_quota"]

# Length of the local part (bit before the @) of autogenerated inbox addresses
INBOX_LENGTH = config["inbox_length"]

# Ratelimit #

# Cooloff time, in minutes, for failed logins
LOGIN_LIMIT_WINDOW = config["ratelimits"]["login"]["window"]

# Maximum number of unsuccessful login attempts
LOGIN_LIMIT_COUNT = config["ratelimits"]["login"]["count"]

# Cooloff time, in minutes, for registrations
REGISTER_LIMIT_WINDOW = config["ratelimits"]["register"]["window"]

# Maximum number of registrations
REGISTER_LIMIT_COUNT = config["ratelimits"]["register"]["count"]

# Cooloff time, in minutes, for downloading a single email
SINGLE_EMAIL_LIMIT_WINDOW = config["ratelimits"]["single_email"]["window"]

# Maximum number of downloads of single emails
SINGLE_EMAIL_LIMIT_COUNT = config["ratelimits"]["single_email"]["count"]

# Cooloff time, in minutes, for inbox creation
INBOX_LIMIT_WINDOW = config["ratelimits"]["inbox"]["window"]

# Maximum number of inboxes creations within limit window
INBOX_LIMIT_COUNT = config["ratelimits"]["inbox"]["count"]

# Tasks #

# Where Celery looks for new tasks and stores results
CELERY_BROKER_URL = config["tasks"]["broker_url"]

# Number of Celery processes to start
CELERY_WORKER_CONCURRENCY = config["tasks"]["concurrency"]

# Runs tasks synchronously
CELERY_TASK_ALWAYS_EAGER = config["tasks"]["always_eager"]

# Path where liberation data is stored
SENDFILE_ROOT = os.path.join(os.getcwd(), config["tasks"]["liberation"]["path"])
SENDFILE_ROOT = SENDFILE_ROOT.rstrip("/")

# Which backend should be used to accelerate liberation data downloads
SENDFILE_BACKEND = config["tasks"]["liberation"]["sendfile_backend"]

# Databases!
DATABASES = {
    'default': {
        'ENGINE': "django.db.backends.postgresql_psycopg2",
        'USER': config["database"]["user"],
        'PASSWORD': config["database"]["password"],
        'NAME': config["database"]["name"],
        'HOST': config["database"]["host"],
        'PORT': config["database"]["port"],
    }
}

# Caches!
CACHES = {
    'default': {
        'BACKEND': config["cache"]["backend"],
        'TIMEOUT': config["cache"]["timeout"],
    }
}

CACHES["default"]["LOCATION"] = config["cache"]["location"]

# populate __all__
__all__ = [item for item in dir() if item.isupper()]
